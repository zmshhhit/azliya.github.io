---
layout: post
title:  "让老WebApp拥有自定义皮肤的平滑过度方案"
date:   2020-02-16 12:47:24 +0800
categories: blog, frontend,darkmode,theme
---

# 现有方案优缺点

| 方案来源    | 原理                                              | 优点                     | 缺点                                       | 缺点-迁移成本 |
| ----------- | ------------------------------------------------- | ------------------------ | ------------------------------------------ | ------------- |
| ant-design  | less框架，使用less变量控制theme                   | 使用less变量             | 现有webapp用的是postcss，迁移工作量大      | 大            |
| material-ui | 使用js对`<style>`标签进行替换，部分使用css-in-js  | css-in-js                | 维护js映射，维护工作量大，而且迁移工作量大 | 大            |
| gitlab      | 利用css选择器，控制root的classname，并写多套style | 原理级方案，没有学习成本 | 维护成本高（N皮肤数 * M选择器数 ）         | 大            |

上述方法提供了三种思路：

1. CSS变量
2. css-in-js
3. CSS选择器+多套style

# 现状

但是几乎所有方案，对于一个我们手头的 POSTCSS “老”项目来说，迁移成本都是较大的：

1. CSS变量：整理统一CSS颜色，大规模重构
2. css-in-js：整理统一CSS颜色 + 换框架，大规模重构，日后维护工作量大
3. CSS选择器+多套style：整理统一CSS颜色，大规模重构，日后维护工作量=N*M

# 方案

综上，考虑到我们需要cover的场景都能够支持CSS变量（参考caniuse），我决定选方案一。但是无论使用哪种方案，我都需要将整个WebApp的颜色系统整理出来，才能够展开下一步。

手动去整理是不现实的：

1. 产品 CSS 量非常大；
2. 产品使用了 POSTCSS 的 color-function plugin，颜色会是一个运算结果；
3. 产品使用的 CSS color 变量多种多样，难以对比颜色的相似度，从而合并冗余颜色

