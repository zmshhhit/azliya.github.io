---
layout: post
title:  "从DarkMode入手，提供一种快速支持自定义theme的解决方案"
date:   2020-02-16 12:47:24 +0800
categories: blog, frontend,darkmode,theme
---

# DarkMode
什么是DM
谁在用DM
他们怎么用DM

# 可切换风格的WebApp
我们需要这样的风格解决方案：

* 迁移尽量少
* 维护（增删改）工作量尽量少



现有的方案与它们的优缺点

| 方案来源    | 原理                                              | 优点                     | 缺点                                       | 缺点-迁移成本 |
| ----------- | ------------------------------------------------- | ------------------------ | ------------------------------------------ | ------------- |
| ant-design  | less框架，使用less变量控制theme                   | 使用less变量             | 现有webapp用的是postcss，迁移工作量大      | 大            |
| material-ui | 使用js对`<style>`标签进行替换，部分使用css-in-js  | css-in-js                | 维护js映射，维护工作量大，而且迁移工作量大 | 大            |
| gitlab      | 利用css选择器，控制root的classname，并写多套style | 原理级方案，没有学习成本 | 维护成本高（N皮肤数 * M选择器数 ）         | 大            |



几乎所有方案，对于一个我们手头的postcss“老”项目来说迁移成本都是较大的，于是我尝试提出一种成本尽量更小的方案。

首先我们来分析下这些迁移成本主要在哪些方面：

1. 维护多套css
2. 调色盘涉及的颜色非常多
3. 之前没有统一使用调色盘，迁移需要将所有使用颜色的地方重新审查整理



针对上面的痛点对症下药，给出自己的解决方案：

1. 使用css变量
2. 由于颜色很多是明暗关系变化，因此用hsl，看能不能通过控制sl，只用维护hua值，减少调色盘的大小
3. ？？？



可以看到其实躲不过，需要审查的地方还是要大量人力参与的，但是postcss其实是有很多plugins引入了很多color function的，人工看是不现实的。

* 使用css variable

我自己出的方案

输出的postcss-loader
