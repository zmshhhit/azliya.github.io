---
layout: post
title: "让老WebApp拥有自定义皮肤的平滑过度方案"
date: 2020-02-16 12:47:24 +0800
tags:
  - 前端开发
  - POSTCSS
---

# 现有方案优缺点

| 方案来源    | 原理                                                    | 优点                     | 缺点                                         | 缺点-迁移成本 |
| ----------- | ------------------------------------------------------- | ------------------------ | -------------------------------------------- | ------------- |
| ant-design  | less 框架，使用 less 变量控制 theme                     | 使用 less 变量           | 现有 webapp 用的是 postcss，迁移工作量大     | 大            |
| material-ui | 使用 js 对`<style>`标签进行替换，部分使用 css-in-js     | css-in-js                | 维护 js 映射，维护工作量大，而且迁移工作量大 | 大            |
| gitlab      | 利用 css 选择器，控制 root 的 classname，并写多套 style | 原理级方案，没有学习成本 | 维护成本高（N 皮肤数 \* M 选择器数 ）        | 大            |

上述方法提供了三种思路：

1. CSS 变量
2. css-in-js
3. CSS 选择器+多套 style

# 现状

但是几乎所有方案，对于一个我们手头的 POSTCSS “老”项目来说，迁移成本都是较大的：

1. CSS 变量：整理统一 CSS 颜色，大规模重构
2. css-in-js：整理统一 CSS 颜色 + 换框架，大规模重构，日后维护工作量大
3. CSS 选择器+多套 style：整理统一 CSS 颜色，大规模重构，日后维护工作量=N\*M

# 方案

综上，考虑到我们需要 cover 的场景都能够支持 CSS 变量（参考 caniuse），决定选方案一。但是无论使用哪种方案，都需要将整个 WebApp 的颜色系统整理出来，才能够展开下一步。

手动去整理是不现实的：

1. 产品 CSS 量非常大；
2. 产品使用了 POSTCSS 的 color-function plugin，颜色会是一个运算结果；
3. 产品使用的 CSS color 变量多种多样，难以对比颜色的相似度，从而合并冗余颜色

于是我写了一个 POSTCSS 插件 [postcss-color-summary]() 利用框架的 AST 帮助整理 CSS 颜色数据：

1. 将颜色整理输出成 CSS 变量；
2. 整合阈值内相似颜色；
3. 支持对 postcss-color-function 处理的颜色分析

利用输出的结果，把原有样式文件中的
